# Pipeline to run the HPU tests in DL1 Instance

trigger:
  tags:
    include: ["*"]
  branches:
    include:
      - "main"
      - "release/*"
      - "refs/tags/*"

pr:
  branches:
    include:
      - "main"
      - "release/*"

schedules:
- cron: '0 0 * * *'
  displayName: Daily midnight check
  branches:
    include: ["main"]

jobs:
  - job: testing
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "35"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"
    strategy:
      matrix:
        'w. pytorch-lightning | pypi':
          image: "1.15.1/ubuntu22.04/habanalabs/pytorch-installer-2.2.0:latest"
          dependency: "pytorch-lightning"
          pkg_source: "pypi"
        'w. pytorch-lightning | source':
          image: "1.15.1/ubuntu22.04/habanalabs/pytorch-installer-2.2.0:latest"
          dependency: "pytorch-lightning"
          pkg_source: "source"
        'w. lightning | pypi':
          image: "1.15.1/ubuntu22.04/habanalabs/pytorch-installer-2.2.0:latest"
          dependency: "lightning"
          pkg_source: "pypi"
        'w. lightning | source':
          image: "1.15.1/ubuntu22.04/habanalabs/pytorch-installer-2.2.0:latest"
          dependency: "lightning"
          pkg_source: "source"
        'w. lightning | master':
          image: "1.15.1/ubuntu22.04/habanalabs/pytorch-installer-2.2.0:latest"
          dependency: "lightning"
          pkg_source: "master"
    pool: "intel-hpus"
    container:
      image: "vault.habana.ai/gaudi-docker/$(image)"
      options: "--runtime=habana \
                -e HABANA_VISIBLE_DEVICES=all \
                -e OMPI_MCA_btl_vader_single_copy_mechanism=none \
                --cap-add=sys_nice \
                --ipc=host \
                --shm-size=4g \
                -v /usr/bin/docker:/tmp/docker:ro"
    variables:
      DEVICES: $( python -c 'print("$(Agent.Name)".split("_")[-1])' )
      MODULE_ID: $( python -c 'print("$(Agent.Name)".split("_")[-1])' )
      DEEPSPEED_VERSION: "1.15.1"

    workspace:
      clean: all

    steps:
    - bash: |
        # echo "##vso[task.setvariable variable=HABANA_VISIBLE_DEVICES]$(DEVICES)"
        echo "##vso[task.setvariable variable=HABANA_VISIBLE_MODULES]$(MODULE_ID)"
      displayName: "set env. vars"

    - bash: |
        hl-smi
        lsmod | grep habanalabs
        echo "HABANA_VISIBLE_DEVICES=$HABANA_VISIBLE_DEVICES"
        echo "HABANA_VISIBLE_MODULES=$HABANA_VISIBLE_MODULES"
        hl-smi -Q index,module_id -f csv
        python --version
        pip --version
      displayName: 'Instance HW info'

    - bash: |
        set -ex
        pip install ".[$(dependency)]" -r requirements/_test.txt
        pip install git+https://github.com/HabanaAI/DeepSpeed.git@$(DEEPSPEED_VERSION)
      displayName: 'Install package & dependencies'

    - bash: pip install https://github.com/Lightning-AI/lightning/archive/refs/heads/release/stable.zip
      condition: eq(variables['pkg_source'], 'source')
      displayName: 'OverInstall lightning from source'

    - bash: pip uninstall -y pytorch-lightning
      condition: eq(variables['dependency'], 'lightning')
      displayName: 'drop PL package'

    - bash: pip uninstall -y lightning
      condition: eq(variables['dependency'], 'pytorch-lightning')
      displayName: 'drop Lightning package'

    - bash: pip install https://github.com/Lightning-AI/lightning/archive/refs/heads/master.zip
      condition: eq(variables['pkg_source'], 'master')
      displayName: 'OverInstall lightning from master'

    # todo: add sanity check that needed cards are visible and accessible

    - bash: |
        set -ex
        pip list
        # todo: consider test all files not listed as you may easily forget to add new
        python -m pytest -sv \
          tests/test_fabric/test_accelerator.py \
          tests/test_fabric/test_strategy.py \
          tests/test_fabric/test_precision.py \
          --hpus 1 --junitxml=hpu_test-fabric-results.xml
        python -m pytest -sv \
          tests/test_pytorch/test_accelerator.py \
          tests/test_pytorch/test_hpu_graphs.py \
          tests/test_pytorch/test_dynamic_shapes.py \
          tests/test_pytorch/test_datamodule.py \
          tests/test_pytorch/test_profiler.py \
          tests/test_pytorch/test_precision.py \
          --hpus 1 --junitxml=hpu_test-torch-results.xml
      displayName: 'HPU General tests'
      condition: ne(variables['pkg_source'], 'master')

    - bash: |
       python -m pytest -sv tests/test_pytorch/test_compile.py \
        --hpus 1 --junitxml=hpu_compile_test-results.xml
      env:
        PT_HPU_LAZY_MODE: 0
      displayName: 'HPU torch compile tests'
      condition: ne(variables['pkg_source'], 'master')

    - bash: |
        python -m pytest -sv tests/test_pytorch/test_deepspeed.py \
        --junitxml=hpu_deepspeed_test-results.xml
      displayName: 'HPU Deepspeed tests'
      condition: ne(variables['pkg_source'], 'master')

    - bash: |
        python -m pytest -sv tests/test_pytorch/test_precision.py \
          -k test_autocast_operators_override --runxfail \
          --junitxml=hpu_precision_test_override-results.xml
      env:
        LOWER_LIST: tests/test_pytorch/ops_fp32.txt
        FP32_LIST: tests/test_pytorch/ops_bf16.txt
      displayName: 'HPU precision test'
      condition: ne(variables['pkg_source'], 'master')

    - bash: |
        bash tests/run_standalone_tests.sh --hpus 2
      displayName: 'Multi card(2) HPU test'
      condition: ne(variables['pkg_source'], 'master')

    - bash: pip install ".[examples]"
      displayName: 'Install extra for examples'
      condition: ne(variables['pkg_source'], 'master')

    - bash: |
       python -m pytest -sv tests/test_pytorch/test_fsdp.py \
        --hpus 2 --junitxml=hpu_fsdp_test-results.xml
      env:
        PT_HPU_LAZY_MODE: 0
      displayName: 'HPU FSDP tests'
      condition: eq(variables['pkg_source'], 'master')

    - bash: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        python pytorch/mnist_trainer.py
        python pytorch/hpu_graphs.py -v train --mode capture_and_replay make_graphed_callables modulecacher
        python pytorch/hpu_graphs.py -v inference --mode capture_and_replay wrap_in_hpu_graph
        python pytorch/hpu_graphs.py -v dynamicity --mode dynamic_control_flow dynamic_ops
      workingDirectory: examples/
      displayName: 'Testing HPU examples'
      condition: ne(variables['pkg_source'], 'master')

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '*-results.xml'
        testRunTitle: '$(Build.DefinitionName) - Python $(python.version)'
      condition: succeededOrFailed()
      displayName: 'Publish test results'
