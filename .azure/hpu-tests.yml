# Pipeline to run the HPU tests in DL1 Instance

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - "main"
      - "release/*"
      - "refs/tags/*"

pr:
  branches:
    include:
      - "main"
      - "release/*"

jobs:
  - job: testing
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "20"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"
    strategy:
      matrix:
        'w. pytorch-lightning | pypi':
          image: "vault.habana.ai/gaudi-docker/1.10.0/ubuntu20.04/habanalabs/pytorch-installer-2.0.1:latest"
          dependency: "pytorch-lightning"
        'w. lightning | pypi':
          image: "vault.habana.ai/gaudi-docker/1.10.0/ubuntu20.04/habanalabs/pytorch-installer-2.0.1:latest"
          dependency: "lightning"
    pool: "intel-hpus"
    container:
      image: $(image)
      options: >
        "--runtime=habana \
        -e HABANA_VISIBLE_DEVICES=all \
        -e OMPI_MCA_btl_vader_single_copy_mechanism=none \
        --cap-add=sys_nice \
        --ipc=host \
        --shm-size=4g \
        -v /usr/bin/docker:/tmp/docker:ro"
    variables:
      DEEPSPEED_VERSION: "1.10.0"
    workspace:
      clean: all

    steps:

    - script: |
        container_id=$(head -1 /proc/self/cgroup|cut -d/ -f3)
        /tmp/docker exec -t -u 0 $container_id \
          sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
        echo "##vso[task.setvariable variable=CONTAINER_ID]$container_id"
      displayName: 'Install Sudo in container (thanks Microsoft!)'

    - bash: |
        sudo pip install -q pip -U
        sudo apt-get install -y hwinfo
        hwinfo --short
        hl-smi -L
        lsmod | grep habanalabs
        python --version
      displayName: 'Instance HW info'

    - script: |
        sudo pip uninstall -y lightning lightning-fabric pytorch-lightning
        python .azure/adjust-requirements.py $(dependency)
        cat requirements.txt
      displayName: 'Adjust dependencies'

    - bash: |
        set -e
        pip --version
        pip install ".[test]"
        pip install git+https://github.com/HabanaAI/DeepSpeed.git@$(DEEPSPEED_VERSION)
        pip list
      displayName: 'Install package & dependencies'

    - bash: |
        python -m pytest -sv \
          test_fabric/test_hpu_accelerator.py \
          test_fabric/test_hpu_strategy.py \
          test_pytorch/test_accelerator.py \
          test_pytorch/test_deepspeed.py \
          --forked #--junitxml=hpu1_test-results.xml
      workingDirectory: tests/
      displayName: 'Single card HPU test'

    - bash: |
        python -m pytest -sv \
          test_pytorch/test_accelerator.py \
          --forked --hpus 8 #--junitxml=hpu8_test-results.xml
      workingDirectory: tests/
      displayName: 'Multi card(8) HPU test'

    - bash: |
        python -m pytest -sv test_pytorch/test_precision.py --hmp-bf16 \
          'test_pytorch/ops_bf16.txt' --hmp-fp32 \
          'test_pytorch/ops_fp32.txt' --forked \
          --junitxml=hpu1_precision_test-results.xml
      workingDirectory: tests/
      displayName: 'HPU precision test'


    - bash: pip install ".[examples]"
      displayName: 'Install extra for examples'

    - bash: |
       export PYTHONPATH="${PYTHONPATH}:$(pwd)"
       python mnist_sample.py
      workingDirectory: examples/pytorch/
      displayName: 'Testing: HPU examples'

    - bash: |
        python -m pytest -sv test_pytorch/test_datamodule.py --forked --hpus 1 --junitxml=hpu1_datamodule_test-results.xml
      workingDirectory: tests/
      displayName: 'HPU datamodule test'

    - bash: |
        python -m pytest -sv test_pytorch/test_profiler.py --forked --hpus 1 --junitxml=hpu1_profiler_test-results.xml
      workingDirectory: tests/
      displayName: 'HPU Profiler Single card test'

    - bash: |
        python -m pytest -sv test_pytorch/test_profiler.py --forked --hpus 8 --junitxml=hpu8_profiler_test-results.xml
      workingDirectory: tests/
      displayName: 'HPU Profiler Multi card(8) test'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'tests/pl_hpu*_test-results.xml'
        testRunTitle: '$(Build.DefinitionName) - Python $(python.version)'
      condition: succeededOrFailed()
      displayName: 'Publish test results'
